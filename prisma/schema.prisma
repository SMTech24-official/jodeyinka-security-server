// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName                     String?
  lastName                      String?
  userName                      String?
  userFullName                  String?
  organizationName              String?
  email                         String          @unique
  country                       String?
  state                         String?
  address                       String?
  avatarUrl                     String?
  password                      String?
  twoFactor                     Boolean         @default(false)
  twoFactorOTP                  String?
  twoFactorOTPExpires           DateTime?
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  forgotPasswordOTP             String?
  forgotPasswordOTPExpires      DateTime?
  dob                           DateTime?
  number                        String?
  isEmailVerified               Boolean         @default(false)
  sponsorStatus                 SponsorStatus   @default(NONE)
  role                          UserRoleEnum    @default(USER)
  status                        UserStatus      @default(ACTIVE)
  createdAt                     DateTime        @default(now())
  updatedAt                     DateTime        @updatedAt
  Resources                     Resource[]
  Comment                       Comment[]
  Event                         Event[]
  Notifications                 Notifications[]
  Transaction                   Transaction[]
  EventSponsor                  EventSponsor[]
  EventsUser                    EventsUser[]

  @@map("users")
  GroupMessage GroupMessage[]
  GroupMember GroupMember[]
  Group Group[]
  callsMade      Call[] @relation("Receiver")
  callsReceived  Call[] @relation("Caller")
  Follows Follow[] @relation("UserFollows")
  Followers Follow[] @relation("UserFollowers")
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
  
 
  Favourite Favourite[] @relation("UserFavourites")
  UserIsFavourited Favourite[] @relation("UserIsFavourited")
}

model Resource {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  authorId    String       @db.ObjectId
  Author      User         @relation(fields: [authorId], references: [id])
  fileUrl     String?
  description String
  type        ResourceType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Comments    Comment[]

  @@map("resources")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  resourceId String   @db.ObjectId
  Resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  authorId   String   @db.ObjectId
  Author     User     @relation(fields: [authorId], references: [id])
  content    String
  createdAt  DateTime @default(now())

  @@map("comments")
}

model EventSponsor {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  tier      EventSponsorTier
  fee       Float
  eventId   String           @db.ObjectId
  event     Event            @relation(fields: [eventId], references: [id])
  sponsorId String           @db.ObjectId
  sponsor   User             @relation(fields: [sponsorId], references: [id])

  @@map("event_sponsors")
}

model Event {
  id                       String         @id @default(auto()) @map("_id") @db.ObjectId
  hostId                   String         @db.ObjectId
  host                     User           @relation(fields: [hostId], references: [id])
  type                     String?
  title                    String
  imageUrl                 String?
  description              String
  date                     DateTime
  latitude                 Float
  longitude                Float
  silverSponsorFee         Float
  goldSponsorFee           Float
  platinumSponsorFee       Float
  silverSponsorAvailable   Boolean        @default(true)
  goldSponsorAvailable     Boolean        @default(true)
  platinumSponsorAvailable Boolean        @default(true)
  endTime                  DateTime?
  venue                    String
  createdAt                DateTime       @default(now())
  EventSponsor             EventSponsor[]
  EventsUser               EventsUser[]

  @@map("events")
}

model EventsUser {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("events_user")
}

model Notifications {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId  String?  @db.ObjectId
  receiver    User?    @relation(fields: [receiverId], references: [id])
  title       String
  description String
  createdAt   DateTime @default(now())

  @@map("notifications")
}

model Transaction {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String              @db.ObjectId
  user      User                @relation(fields: [userId], references: [id])
  paymentId String
  amount    Float
  type      TransactionTypeEnum
  currency  String
  method    String
  createdAt DateTime            @default(now())

  @@map("transactions")
}


model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  followingId String   @db.ObjectId
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content    String?
  messageType MessageType @default(TEXT)  // TEXT, IMAGE, AUDIO, VIDEO ইত্যাদি
  createdAt  DateTime @default(now())

  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

model Call {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  callerId     String    @db.ObjectId
  caller       User      @relation("Caller", fields: [callerId], references: [id])
  receiverId   String    @db.ObjectId
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  callType     CallType
  startedAt    DateTime
  endedAt      DateTime?
  status       CallStatus
  createdAt    DateTime  @default(now())

  @@map("calls")
}

enum CallType {
  AUDIO
  VIDEO
}

enum CallStatus {
  MISSED
  COMPLETED
  CANCELLED
  ONGOING
}


model Group {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  creatorId   String         @db.ObjectId
  creator     User           @relation(fields: [creatorId], references: [id])
  createdAt   DateTime       @default(now())
  members     GroupMember[]

  @@map("groups")
  GroupMessage GroupMessage[]
}


model GroupMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  role      GroupMemberRole  @default(MEMBER)
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
  @@map("group_members")
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}




model GroupMessage {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String    @db.ObjectId
  group     Group     @relation(fields: [groupId], references: [id])
  senderId  String    @db.ObjectId
  sender    User      @relation(fields: [senderId], references: [id])
  content   String?
  messageType MessageType @default(TEXT)
  createdAt DateTime  @default(now())

  @@map("group_messages")
}


model Favourite {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId

  userId           String   @db.ObjectId
  user             User     @relation("UserFavourites", fields: [userId], references: [id], onDelete: Cascade)

  favouriteUserId  String   @db.ObjectId
  favouriteUser    User     @relation("UserIsFavourited", fields: [favouriteUserId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}



enum UserRoleEnum {
  USER
  SPONSOR
  MEMBER
  ADMIN
  SUPERADMIN
}

enum TransactionTypeEnum {
  MEMBERSHIP
  SPONSORSHIP
  DONATION
}

enum SponsorStatus {
  PENDING
  APPROVED
  NONE
}

enum EventSponsorTier {
  SILVER
  GOLD
  PLATINUM
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVATE
  BLOCKED
}

enum ResourceType {
  MEDIA
  RESOURCE
  BLOG
}
