// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName                     String?
  lastName                      String?
  userName                      String?
  userFullName                  String?
  stripeCustomerId              String?            @default("")
  organizationName              String?
  email                         String          @unique
  country                       String?
  state                         String?
  address                       String?
  avatarUrl                     String?
  password                      String?
  image                          String?
  isOnline                       Boolean?  @default(false)
  lastSeen                      DateTime?
  twoFactor                     Boolean?         @default(false)
  twoFactorOTP                  String?
  twoFactorOTPExpires           DateTime?
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  forgotPasswordOTP             String?
  forgotPasswordOTPExpires      DateTime?
  dob                           DateTime?
  number                        String?
  fcmToken                      String?
  isEmailVerified               Boolean?         @default(false)
  sponsorStatus                 SponsorStatus?   @default(NONE)
  role                          UserRoleEnum?    @default(USER)
  status                        UserStatus?      @default(ACTIVE)
  createdAt                     DateTime        @default(now())
  updatedAt                     DateTime        @updatedAt
  Resources                     Resource[]
  Comment                       Comment[]
  Event                         Event[]
  Transaction                   Transaction[]
  EventSponsor                  EventSponsor[]
  EventsUser                    EventsUser[]

  @@map("users")
  GroupMessage GroupMessage[]
  GroupMember GroupMember[]
  Group Group[]
  callsMade      Call[] @relation("Receiver")
  callsReceived  Call[] @relation("Caller")
  Follows Follow[] @relation("UserFollows")
  Followers Follow[] @relation("UserFollowers")
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
  
 
  Favourite Favourite[] @relation("UserFavourites")
  UserIsFavourited Favourite[] @relation("UserIsFavourited")
  
  
  JobApply JobApply[] @relation("UserApplications")
  Job Job[] @relation("UserJobs")
  Like Like[]

  NotificationSender Notifications[] @relation("NotificationSender")
  NotificationReceiver Notifications[] @relation("NotificationReceiver")
  Subscription_Plan Subscription_Plan[]
  UserSubscription UserSubscription[]

  PostComment PostComment[]
  PostLike PostLike[]
  Post Post[]
  SentFriendRequest FriendRequest[] @relation("SentRequests")
  ReceivedFriendRequest FriendRequest[] @relation("ReceivedRequests")
  GroupInvite GroupInvite[] @relation("Inviter")
  GroupInviter GroupInvite[] @relation("Invitee")
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PostVisibility {
  PUBLIC
  PRIVATE
}


model Resource {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  authorId    String       @db.ObjectId
  Author      User         @relation(fields: [authorId], references: [id])
  fileUrl     String?
  description String
  type        ResourceType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status     PostStatus    @default(PENDING)
  visibility PostVisibility @default(PUBLIC)
  views      Int           @default(0)

  Comments    Comment[]

  

  @@map("resources")
  Like Like[]

}


model Post {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  authorId    String       @db.ObjectId
  Author      User         @relation(fields: [authorId], references: [id])
  fileUrl     String?
  description String
  type        ResourceType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status     PostStatus    @default(PENDING)
  visibility PostVisibility @default(PUBLIC)
  views      Int           @default(0)


  PostLike PostLike[]

  PostComment PostComment[]
}

enum SalaryType {
  HOURLY
  MONTHLY
  YEARLY
}



model Job {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     String
  location    String
  salary      Int
  salaryType  SalaryType

  authorId    String       @db.ObjectId
  Author      User         @relation("UserJobs", fields: [authorId], references: [id])

  applications JobApply[]  @relation("JobApplications")

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("job")
}

enum JobApplicationStatus {
  APPLIED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}


model JobApply {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId

  jobId        String     @db.ObjectId
  applicantId  String     @db.ObjectId

  Job          Job        @relation("JobApplications", fields: [jobId], references: [id])
  Applicant    User       @relation("UserApplications", fields: [applicantId], references: [id])

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
   status JobApplicationStatus @default(APPLIED)
  

  @@map("jobApply")
}


model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  resourceId String   @db.ObjectId
  Resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  authorId   String   @db.ObjectId
  Author     User     @relation(fields: [authorId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  

  @@map("comments")
}


model PostComment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId  String   @db.ObjectId
  post     Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId   String   @db.ObjectId
  Author     User     @relation(fields: [authorId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  

  @@map("post_comments")
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  resourceId String   @db.ObjectId
  Resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  userId     String   @db.ObjectId
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@unique([resourceId, userId]) // একজন user একবারই like করতে পারবে
  @@map("likes")
}


model PostLike {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId String   @db.ObjectId
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId     String   @db.ObjectId
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@unique([postId, userId]) // একজন user একবারই like করতে পারবে
  @@map("post_likes")
}


model EventSponsor {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  tier      EventSponsorTier
  fee       Float
  eventId   String           @db.ObjectId
  event     Event            @relation(fields: [eventId], references: [id])
  sponsorId String           @db.ObjectId
  sponsor   User             @relation(fields: [sponsorId], references: [id])

  @@map("event_sponsors")
}

model Event {
  id                       String         @id @default(auto()) @map("_id") @db.ObjectId
  hostId                   String         @db.ObjectId
  host                     User           @relation(fields: [hostId], references: [id])
  type                     String?
  title                    String
  imageUrl                 String?
  description              String
  date                     DateTime
  latitude                 Float
  longitude                Float
  silverSponsorFee         Float
  goldSponsorFee           Float
  platinumSponsorFee       Float
  silverSponsorAvailable   Boolean        @default(true)
  goldSponsorAvailable     Boolean        @default(true)
  platinumSponsorAvailable Boolean        @default(true)
  endTime                  DateTime?
  venue                    String
  createdAt                DateTime       @default(now())
  EventSponsor             EventSponsor[]
  EventsUser               EventsUser[]

  @@map("events")
}

model EventsUser {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("events_user")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content    String?
  seen       Boolean?   @default(false)
  seenAt     DateTime?
  roomId      String  
  createdAt  DateTime @default(now())

  @@map("messages")
}


model Notifications {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId

  receiverId  String?  @db.ObjectId
  receiver    User?    @relation("NotificationReceiver", fields: [receiverId], references: [id])

  senderId    String?  @db.ObjectId
  sender      User?    @relation("NotificationSender", fields: [senderId], references: [id])

  title       String?
  description String?
  message     String?
  type        String?
  createdAt   DateTime @default(now())

  entityId   String?   // কোন resource/job/group/message এর সাথে linkd
  entityType String?   // "POST", "COMMENT", "LIKE", "JOB", "MESSAGE"
  isRead     Boolean   @default(false)   // read/unread status

  @@map("notifications")
}

model Transaction {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String              @db.ObjectId
  user      User                @relation(fields: [userId], references: [id])
  paymentId String
  status    SubscriptionStatus?  @default(ACTIVE)  // ⬅️ এই লাইনটা নতুন
  amount    Float
  type      TransactionTypeEnum
  currency  String
  method    String
  nextBilling DateTime?   
  createdAt DateTime            @default(now())
  updatedAt DateTime?           @default(now())

  @@map("transactions")
}

enum IntervalType {
  month
  year
  lifetime
}

model Subscription_Plan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  name        String
  priceId     String   @unique
  paymentType String   @default("Stripe")
  active      Boolean   @default(true)
  interval    IntervalType  // "month", "year", অথবা "lifetime"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userRole UserRoleEnum  @default(MEMBER)
  

  @@unique([userId, name])
  @@map("Subscription_Plan")
}



// enum SubscriptionStatus {
//   ACTIVE
//   CANCELLED
//   PAST_DUE
//   UNPAID
// }

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  followingId String   @db.ObjectId
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@map("follows")
}



enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

model Call {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  callerId     String    @db.ObjectId
  caller       User      @relation("Caller", fields: [callerId], references: [id])
  receiverId   String    @db.ObjectId
  receiver     User      @relation("Receiver", fields: [receiverId], references: [id])
  callType     CallType
  startedAt    DateTime
  endedAt      DateTime?
  status       CallStatus
  createdAt    DateTime  @default(now())
   type MessageType @default(TEXT)   // TEXT, IMAGE, VIDEO

  @@map("calls")
}

enum CallType {
  AUDIO
  VIDEO
}

enum CallStatus {
  MISSED
  COMPLETED
  CANCELLED
  ONGOING
}


model Group {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  creatorId   String         @db.ObjectId
  creator     User           @relation(fields: [creatorId], references: [id])
  createdAt   DateTime       @default(now())

  members     GroupMember[]
  messages    GroupMessage[]
  invites     GroupInvite[]

  @@map("groups")
}

model GroupMember {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String         @db.ObjectId
  group     Group          @relation(fields: [groupId], references: [id])
  userId    String         @db.ObjectId
  user      User           @relation(fields: [userId], references: [id])
  role      GroupMemberRole @default(MEMBER)
  status    MemberStatus    @default(PENDING)
  joinedAt  DateTime        @default(now())

  @@unique([groupId, userId])
  @@map("group_members")
}

enum GroupMemberRole {
  ADMIN
  MEMBER
}

enum MemberStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model GroupMessage {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  groupId    String      @db.ObjectId
  group      Group       @relation(fields: [groupId], references: [id])
  senderId   String      @db.ObjectId
  sender     User        @relation(fields: [senderId], references: [id])
  content    String?
  messageType GroupMessageType @default(TEXT)
  createdAt  DateTime    @default(now())

  @@map("group_messages")
}

enum GroupMessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

model GroupInvite {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String       @db.ObjectId
  group     Group        @relation(fields: [groupId], references: [id])
  inviterId String       @db.ObjectId
  inviter   User         @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId String       @db.ObjectId
  invitee   User         @relation("Invitee", fields: [inviteeId], references: [id])
  status    InviteStatus @default(PENDING)
  createdAt DateTime     @default(now())

  @@map("group_invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}


model FriendRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String    @db.ObjectId
  receiverId String    @db.ObjectId
  status     String   @default("pending") // pending | accepted | rejected
  createdAt  DateTime @default(now())

  sender   User @relation("SentRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id])
}





model Favourite {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId

  userId           String   @db.ObjectId
  user             User     @relation("UserFavourites", fields: [userId], references: [id], onDelete: Cascade)

  favouriteUserId  String   @db.ObjectId
  favouriteUser    User     @relation("UserIsFavourited", fields: [favouriteUserId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}






enum UserRoleEnum {
  USER
  SPONSOR
  MEMBER
  ADMIN
  SUPERADMIN
}

enum TransactionTypeEnum {
  MEMBERSHIP
  SPONSORSHIP
  DONATION
}

enum SponsorStatus {
  PENDING
  APPROVED
  NONE
}

enum EventSponsorTier {
  SILVER
  GOLD
  PLATINUM
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVATE
  BLOCKED
}

enum ResourceType {
  MEDIA
  RESOURCE
  BLOG
}





// ---------------------

// enums
enum SubscriptionType {
  BRONZE
  GOLD
  SILVER
  PLATINUM
  BASIC
  PREMIUM
}


enum SubscriptionStatus {
  ACTIVE
  PENDING
  DEACTIVE
}


model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  pricingId      String?          @unique
  productId      String?          @unique
  interval       IntervalType
  interval_count Int
  price          Float
  title          SubscriptionType
  features       Json             @db.Json

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserSubscription UserSubscription[]

  @@map("subscription")
}

model UserSubscription {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  userId            String             @db.ObjectId
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId    String             @db.ObjectId
  subscription      Subscription?      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  priceId           String?
  subscriptionPayId String?            
  status            SubscriptionStatus @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@unique([userId, subscriptionId])
  @@unique([userId, priceId])
  @@map("userSubscription")
}